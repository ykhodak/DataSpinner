// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file mddelta.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__MDDELTA_HPP
#define FAST_DDS_GENERATED__MDDELTA_HPP

#include <array>
#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MDDELTA_SOURCE)
#define MDDELTA_DllAPI __declspec( dllexport )
#else
#define MDDELTA_DllAPI __declspec( dllimport )
#endif // MDDELTA_SOURCE
#else
#define MDDELTA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MDDELTA_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure IntData defined by the user in the IDL file.
 * @ingroup mddelta
 */
class IntData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport IntData()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~IntData()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object IntData that will be copied.
     */
    eProsima_user_DllExport IntData(
            const IntData& x)
    {
                    m_index = x.m_index;

                    m_value = x.m_value;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object IntData that will be copied.
     */
    eProsima_user_DllExport IntData(
            IntData&& x) noexcept
    {
        m_index = std::move(x.m_index);
        m_value = std::move(x.m_value);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object IntData that will be copied.
     */
    eProsima_user_DllExport IntData& operator =(
            const IntData& x)
    {

                    m_index = x.m_index;

                    m_value = x.m_value;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object IntData that will be copied.
     */
    eProsima_user_DllExport IntData& operator =(
            IntData&& x) noexcept
    {

        m_index = std::move(x.m_index);
        m_value = std::move(x.m_value);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x IntData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const IntData& x) const
    {
        return (m_index == x.m_index &&
           m_value == x.m_value);
    }

    /*!
     * @brief Comparison operator.
     * @param x IntData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const IntData& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member index
     * @param _index New value to be copied in member index
     */
    eProsima_user_DllExport void index(
            const std::array<uint16_t, 6>& _index)
    {
        m_index = _index;
    }

    /*!
     * @brief This function moves the value in member index
     * @param _index New value to be moved in member index
     */
    eProsima_user_DllExport void index(
            std::array<uint16_t, 6>&& _index)
    {
        m_index = std::move(_index);
    }

    /*!
     * @brief This function returns a constant reference to member index
     * @return Constant reference to member index
     */
    eProsima_user_DllExport const std::array<uint16_t, 6>& index() const
    {
        return m_index;
    }

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport std::array<uint16_t, 6>& index()
    {
        return m_index;
    }


    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const std::array<int32_t, 6>& _value)
    {
        m_value = _value;
    }

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            std::array<int32_t, 6>&& _value)
    {
        m_value = std::move(_value);
    }

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const std::array<int32_t, 6>& value() const
    {
        return m_value;
    }

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport std::array<int32_t, 6>& value()
    {
        return m_value;
    }



private:

    std::array<uint16_t, 6> m_index{0};
    std::array<int32_t, 6> m_value{0};

};
/*!
 * @brief This class represents the structure DblData defined by the user in the IDL file.
 * @ingroup mddelta
 */
class DblData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DblData()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DblData()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DblData that will be copied.
     */
    eProsima_user_DllExport DblData(
            const DblData& x)
    {
                    m_index = x.m_index;

                    m_value = x.m_value;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DblData that will be copied.
     */
    eProsima_user_DllExport DblData(
            DblData&& x) noexcept
    {
        m_index = std::move(x.m_index);
        m_value = std::move(x.m_value);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DblData that will be copied.
     */
    eProsima_user_DllExport DblData& operator =(
            const DblData& x)
    {

                    m_index = x.m_index;

                    m_value = x.m_value;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DblData that will be copied.
     */
    eProsima_user_DllExport DblData& operator =(
            DblData&& x) noexcept
    {

        m_index = std::move(x.m_index);
        m_value = std::move(x.m_value);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x DblData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DblData& x) const
    {
        return (m_index == x.m_index &&
           m_value == x.m_value);
    }

    /*!
     * @brief Comparison operator.
     * @param x DblData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DblData& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member index
     * @param _index New value to be copied in member index
     */
    eProsima_user_DllExport void index(
            const std::array<uint16_t, 18>& _index)
    {
        m_index = _index;
    }

    /*!
     * @brief This function moves the value in member index
     * @param _index New value to be moved in member index
     */
    eProsima_user_DllExport void index(
            std::array<uint16_t, 18>&& _index)
    {
        m_index = std::move(_index);
    }

    /*!
     * @brief This function returns a constant reference to member index
     * @return Constant reference to member index
     */
    eProsima_user_DllExport const std::array<uint16_t, 18>& index() const
    {
        return m_index;
    }

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport std::array<uint16_t, 18>& index()
    {
        return m_index;
    }


    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const std::array<double, 18>& _value)
    {
        m_value = _value;
    }

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            std::array<double, 18>&& _value)
    {
        m_value = std::move(_value);
    }

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const std::array<double, 18>& value() const
    {
        return m_value;
    }

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport std::array<double, 18>& value()
    {
        return m_value;
    }



private:

    std::array<uint16_t, 18> m_index{0};
    std::array<double, 18> m_value{0.0};

};
/*!
 * @brief This class represents the structure StampData defined by the user in the IDL file.
 * @ingroup mddelta
 */
class StampData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StampData()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StampData()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StampData that will be copied.
     */
    eProsima_user_DllExport StampData(
            const StampData& x)
    {
                    m_index = x.m_index;

                    m_value = x.m_value;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StampData that will be copied.
     */
    eProsima_user_DllExport StampData(
            StampData&& x) noexcept
    {
        m_index = std::move(x.m_index);
        m_value = std::move(x.m_value);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StampData that will be copied.
     */
    eProsima_user_DllExport StampData& operator =(
            const StampData& x)
    {

                    m_index = x.m_index;

                    m_value = x.m_value;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StampData that will be copied.
     */
    eProsima_user_DllExport StampData& operator =(
            StampData&& x) noexcept
    {

        m_index = std::move(x.m_index);
        m_value = std::move(x.m_value);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x StampData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StampData& x) const
    {
        return (m_index == x.m_index &&
           m_value == x.m_value);
    }

    /*!
     * @brief Comparison operator.
     * @param x StampData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StampData& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member index
     * @param _index New value to be copied in member index
     */
    eProsima_user_DllExport void index(
            const std::array<uint16_t, 2>& _index)
    {
        m_index = _index;
    }

    /*!
     * @brief This function moves the value in member index
     * @param _index New value to be moved in member index
     */
    eProsima_user_DllExport void index(
            std::array<uint16_t, 2>&& _index)
    {
        m_index = std::move(_index);
    }

    /*!
     * @brief This function returns a constant reference to member index
     * @return Constant reference to member index
     */
    eProsima_user_DllExport const std::array<uint16_t, 2>& index() const
    {
        return m_index;
    }

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport std::array<uint16_t, 2>& index()
    {
        return m_index;
    }


    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const std::array<uint64_t, 2>& _value)
    {
        m_value = _value;
    }

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            std::array<uint64_t, 2>&& _value)
    {
        m_value = std::move(_value);
    }

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const std::array<uint64_t, 2>& value() const
    {
        return m_value;
    }

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport std::array<uint64_t, 2>& value()
    {
        return m_value;
    }



private:

    std::array<uint16_t, 2> m_index{0};
    std::array<uint64_t, 2> m_value{0};

};
/*!
 * @brief This class represents the structure MdDelta defined by the user in the IDL file.
 * @ingroup mddelta
 */
class MdDelta
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MdDelta()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MdDelta()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MdDelta that will be copied.
     */
    eProsima_user_DllExport MdDelta(
            const MdDelta& x)
    {
                    m_session_idx = x.m_session_idx;

                    m_wire_tstamp = x.m_wire_tstamp;

                    m_symbol = x.m_symbol;

                    m_int_data = x.m_int_data;

                    m_dbl_data = x.m_dbl_data;

                    m_stamps = x.m_stamps;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MdDelta that will be copied.
     */
    eProsima_user_DllExport MdDelta(
            MdDelta&& x) noexcept
    {
        m_session_idx = x.m_session_idx;
        m_wire_tstamp = x.m_wire_tstamp;
        m_symbol = std::move(x.m_symbol);
        m_int_data = std::move(x.m_int_data);
        m_dbl_data = std::move(x.m_dbl_data);
        m_stamps = std::move(x.m_stamps);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MdDelta that will be copied.
     */
    eProsima_user_DllExport MdDelta& operator =(
            const MdDelta& x)
    {

                    m_session_idx = x.m_session_idx;

                    m_wire_tstamp = x.m_wire_tstamp;

                    m_symbol = x.m_symbol;

                    m_int_data = x.m_int_data;

                    m_dbl_data = x.m_dbl_data;

                    m_stamps = x.m_stamps;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MdDelta that will be copied.
     */
    eProsima_user_DllExport MdDelta& operator =(
            MdDelta&& x) noexcept
    {

        m_session_idx = x.m_session_idx;
        m_wire_tstamp = x.m_wire_tstamp;
        m_symbol = std::move(x.m_symbol);
        m_int_data = std::move(x.m_int_data);
        m_dbl_data = std::move(x.m_dbl_data);
        m_stamps = std::move(x.m_stamps);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MdDelta object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MdDelta& x) const
    {
        return (m_session_idx == x.m_session_idx &&
           m_wire_tstamp == x.m_wire_tstamp &&
           m_symbol == x.m_symbol &&
           m_int_data == x.m_int_data &&
           m_dbl_data == x.m_dbl_data &&
           m_stamps == x.m_stamps);
    }

    /*!
     * @brief Comparison operator.
     * @param x MdDelta object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MdDelta& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member session_idx
     * @param _session_idx New value for member session_idx
     */
    eProsima_user_DllExport void session_idx(
            uint32_t _session_idx)
    {
        m_session_idx = _session_idx;
    }

    /*!
     * @brief This function returns the value of member session_idx
     * @return Value of member session_idx
     */
    eProsima_user_DllExport uint32_t session_idx() const
    {
        return m_session_idx;
    }

    /*!
     * @brief This function returns a reference to member session_idx
     * @return Reference to member session_idx
     */
    eProsima_user_DllExport uint32_t& session_idx()
    {
        return m_session_idx;
    }


    /*!
     * @brief This function sets a value in member wire_tstamp
     * @param _wire_tstamp New value for member wire_tstamp
     */
    eProsima_user_DllExport void wire_tstamp(
            uint64_t _wire_tstamp)
    {
        m_wire_tstamp = _wire_tstamp;
    }

    /*!
     * @brief This function returns the value of member wire_tstamp
     * @return Value of member wire_tstamp
     */
    eProsima_user_DllExport uint64_t wire_tstamp() const
    {
        return m_wire_tstamp;
    }

    /*!
     * @brief This function returns a reference to member wire_tstamp
     * @return Reference to member wire_tstamp
     */
    eProsima_user_DllExport uint64_t& wire_tstamp()
    {
        return m_wire_tstamp;
    }


    /*!
     * @brief This function copies the value in member symbol
     * @param _symbol New value to be copied in member symbol
     */
    eProsima_user_DllExport void symbol(
            const std::string& _symbol)
    {
        m_symbol = _symbol;
    }

    /*!
     * @brief This function moves the value in member symbol
     * @param _symbol New value to be moved in member symbol
     */
    eProsima_user_DllExport void symbol(
            std::string&& _symbol)
    {
        m_symbol = std::move(_symbol);
    }

    /*!
     * @brief This function returns a constant reference to member symbol
     * @return Constant reference to member symbol
     */
    eProsima_user_DllExport const std::string& symbol() const
    {
        return m_symbol;
    }

    /*!
     * @brief This function returns a reference to member symbol
     * @return Reference to member symbol
     */
    eProsima_user_DllExport std::string& symbol()
    {
        return m_symbol;
    }


    /*!
     * @brief This function copies the value in member int_data
     * @param _int_data New value to be copied in member int_data
     */
    eProsima_user_DllExport void int_data(
            const IntData& _int_data)
    {
        m_int_data = _int_data;
    }

    /*!
     * @brief This function moves the value in member int_data
     * @param _int_data New value to be moved in member int_data
     */
    eProsima_user_DllExport void int_data(
            IntData&& _int_data)
    {
        m_int_data = std::move(_int_data);
    }

    /*!
     * @brief This function returns a constant reference to member int_data
     * @return Constant reference to member int_data
     */
    eProsima_user_DllExport const IntData& int_data() const
    {
        return m_int_data;
    }

    /*!
     * @brief This function returns a reference to member int_data
     * @return Reference to member int_data
     */
    eProsima_user_DllExport IntData& int_data()
    {
        return m_int_data;
    }


    /*!
     * @brief This function copies the value in member dbl_data
     * @param _dbl_data New value to be copied in member dbl_data
     */
    eProsima_user_DllExport void dbl_data(
            const DblData& _dbl_data)
    {
        m_dbl_data = _dbl_data;
    }

    /*!
     * @brief This function moves the value in member dbl_data
     * @param _dbl_data New value to be moved in member dbl_data
     */
    eProsima_user_DllExport void dbl_data(
            DblData&& _dbl_data)
    {
        m_dbl_data = std::move(_dbl_data);
    }

    /*!
     * @brief This function returns a constant reference to member dbl_data
     * @return Constant reference to member dbl_data
     */
    eProsima_user_DllExport const DblData& dbl_data() const
    {
        return m_dbl_data;
    }

    /*!
     * @brief This function returns a reference to member dbl_data
     * @return Reference to member dbl_data
     */
    eProsima_user_DllExport DblData& dbl_data()
    {
        return m_dbl_data;
    }


    /*!
     * @brief This function copies the value in member stamps
     * @param _stamps New value to be copied in member stamps
     */
    eProsima_user_DllExport void stamps(
            const StampData& _stamps)
    {
        m_stamps = _stamps;
    }

    /*!
     * @brief This function moves the value in member stamps
     * @param _stamps New value to be moved in member stamps
     */
    eProsima_user_DllExport void stamps(
            StampData&& _stamps)
    {
        m_stamps = std::move(_stamps);
    }

    /*!
     * @brief This function returns a constant reference to member stamps
     * @return Constant reference to member stamps
     */
    eProsima_user_DllExport const StampData& stamps() const
    {
        return m_stamps;
    }

    /*!
     * @brief This function returns a reference to member stamps
     * @return Reference to member stamps
     */
    eProsima_user_DllExport StampData& stamps()
    {
        return m_stamps;
    }



private:

    uint32_t m_session_idx{0};
    uint64_t m_wire_tstamp{0};
    std::string m_symbol;
    IntData m_int_data;
    DblData m_dbl_data;
    StampData m_stamps;

};

#endif // _FAST_DDS_GENERATED_MDDELTA_HPP_


