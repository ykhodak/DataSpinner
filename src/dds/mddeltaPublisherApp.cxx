// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file mddeltaPublisherApp.cxx
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#include "mddeltaPublisherApp.hpp"

#include <condition_variable>
#include <csignal>
#include <stdexcept>
#include <thread>

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/publisher/qos/DataWriterQos.hpp>
#include <fastdds/dds/publisher/qos/PublisherQos.hpp>

#include "mddeltaPubSubTypes.hpp"
#include "md_dds_util.h"
#include "spinner_core.h"

using namespace eprosima::fastdds::dds;

mddeltaPublisherApp::mddeltaPublisherApp(
        const int& domain_id)
    : factory_(nullptr)
    , participant_(nullptr)
    , publisher_(nullptr)
    , topic_(nullptr)
    , writer_(nullptr)
    , type_(new MdDeltaPubSubType())
    , matched_(0)
    , samples_sent_(0)
    , stop_(false)
{
    //

    // Create the participant
    DomainParticipantQos pqos = PARTICIPANT_QOS_DEFAULT;
    pqos.name("MdDelta_pub_participant");
    factory_ = DomainParticipantFactory::get_shared_instance();
    participant_ = factory_->create_participant(domain_id, pqos, nullptr, StatusMask::none());
    if (participant_ == nullptr)
    {
        throw std::runtime_error("MdDelta Participant initialization failed");
    }

    // Register the type
    type_.register_type(participant_);

    // Create the publisher
    PublisherQos pub_qos = PUBLISHER_QOS_DEFAULT;
    participant_->get_default_publisher_qos(pub_qos);
    publisher_ = participant_->create_publisher(pub_qos, nullptr, StatusMask::none());
    if (publisher_ == nullptr)
    {
        throw std::runtime_error("MdDelta Publisher initialization failed");
    }

    // Create the topic
    TopicQos topic_qos = TOPIC_QOS_DEFAULT;
    participant_->get_default_topic_qos(topic_qos);
    topic_ = participant_->create_topic("mddeltaTopic", type_.get_type_name(), topic_qos);
    if (topic_ == nullptr)
    {
        throw std::runtime_error("MdDelta Topic initialization failed");
    }

    // Create the data writer
    DataWriterQos writer_qos = DATAWRITER_QOS_DEFAULT;
    publisher_->get_default_datawriter_qos(writer_qos);
    writer_qos.reliability().kind = ReliabilityQosPolicyKind::RELIABLE_RELIABILITY_QOS;
    writer_qos.durability().kind = DurabilityQosPolicyKind::TRANSIENT_LOCAL_DURABILITY_QOS;
    writer_qos.history().kind = HistoryQosPolicyKind::KEEP_ALL_HISTORY_QOS;
    writer_ = publisher_->create_datawriter(topic_, writer_qos, this, StatusMask::all());
    if (writer_ == nullptr)
    {
        throw std::runtime_error("MdDelta DataWriter initialization failed");
    }
}

mddeltaPublisherApp::~mddeltaPublisherApp()
{
    if (nullptr != participant_)
    {
        // Delete DDS entities contained within the DomainParticipant
        participant_->delete_contained_entities();

        // Delete DomainParticipant
        factory_->delete_participant(participant_);
    }
}

void mddeltaPublisherApp::on_publication_matched(
        DataWriter* /*writer*/,
        const PublicationMatchedStatus& info)
{
    if (info.current_count_change == 1)
    {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            matched_ = info.current_count;
        }
        std::cout << "MdDelta Publisher matched." << std::endl;
        cv_.notify_one();
    }
    else if (info.current_count_change == -1)
    {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            matched_ = info.current_count;
        }
        std::cout << "MdDelta Publisher unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

void mddeltaPublisherApp::run()
{
    auto& cfg = spnr::Cfg::cfg();
    spnr::MetricsObserver obv(spnr::Cfg::cfg().stat_check_every_n_tick_, spnr::Cfg::cfg().stat_upd_every_nsec_);
    obv.reset_tick_observer("pub");
    while (!is_stopped())
    {
        if (publish())
        {
            ++samples_sent_;
         //   std::cout << "Sample '" << std::to_string(samples_sent_) << "' SENT" << std::endl;
        }
        else 
        {
           // std::cout << "ERROR publish failed Sample '" << std::to_string(++samples_sent_) << "' SENT" << std::endl;
        }

        obv.next_tick_publisher_metrics(samples_sent_);

        // Wait for period or stop event
        if (cfg.publisher_spin_sleep_ns_ > 0) {
            std::unique_lock<std::mutex> period_lock(mutex_);
            cv_.wait_for(period_lock, std::chrono::nanoseconds(cfg.publisher_spin_sleep_ns_), [this]()
                {
                    return is_stopped();
                });
        }
               
    }
}


bool mddeltaPublisherApp::publish()
{
    bool ret = false;
    // Wait for the data endpoints discovery
    std::unique_lock<std::mutex> matched_lock(mutex_);
    cv_.wait(matched_lock, [&]()
            {
                // at least one has been discovered
                return ((matched_ > 0) || is_stopped());
            });

    if (!is_stopped())
    {
        /* Initialize your structure here */
        MdDelta sample_;
        tu_dds::dds_make_one_delta("AAPL", sample_, ++session_index_);

        auto writer_result = writer_->write(&sample_);
        if (writer_result != RETCODE_OK) {
            spnr::errlog("failed to write [%d]", writer_result);
        }
        /*if (writer_result != RETCODE_OK) {
            writer_result = writer_->write(&sample_);
            int i = 0;
            ++i;
        }*/

        ret = (RETCODE_OK == writer_result);
    }
    return ret;
}

bool mddeltaPublisherApp::is_stopped()
{
    return stop_.load();
}

void mddeltaPublisherApp::stop()
{
    stop_.store(true);
    cv_.notify_one();
} 
