// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file mddeltaTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "mddeltaTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "mddelta.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_IntData_type_identifier(
        TypeIdentifierPair& type_ids_IntData)
{

    ReturnCode_t return_code_IntData {eprosima::fastdds::dds::RETCODE_OK};
    return_code_IntData =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "IntData", type_ids_IntData);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_IntData)
    {
        StructTypeFlag struct_flags_IntData = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_IntData = "IntData";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_IntData;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_IntData;
        CompleteTypeDetail detail_IntData = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_IntData, ann_custom_IntData, type_name_IntData.to_string());
        CompleteStructHeader header_IntData;
        header_IntData = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_IntData);
        CompleteStructMemberSeq member_seq_IntData;
        {
            TypeIdentifierPair type_ids_index;
            ReturnCode_t return_code_index {eprosima::fastdds::dds::RETCODE_OK};
            return_code_index =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_uint16_t_6", type_ids_index);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_index)
            {
                return_code_index =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_index);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_index)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_uint16_t_6_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_uint16_t_6 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_index, element_identifier_anonymous_array_uint16_t_6_ec))};
                if (!element_identifier_anonymous_array_uint16_t_6_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_uint16_t_6 = EK_COMPLETE;
                if (TK_NONE == type_ids_index.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_uint16_t_6 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_uint16_t_6 = 0;
                PlainCollectionHeader header_anonymous_array_uint16_t_6 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_uint16_t_6, element_flags_anonymous_array_uint16_t_6);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(6));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_uint16_t_6, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_uint16_t_6));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint16_t_6", type_ids_index))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint16_t_6 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_index = 0x00000000;
            bool common_index_ec {false};
            CommonStructMember common_index {TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_index, common_index_ec))};
            if (!common_index_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_index = "index";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
            ann_custom_IntData.reset();
            CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index, member_ann_builtin_index, ann_custom_IntData);
            CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index, detail_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_IntData, member_index);
        }
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_int32_t_6", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                return_code_value =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_value);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_int32_t_6_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_int32_t_6 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, element_identifier_anonymous_array_int32_t_6_ec))};
                if (!element_identifier_anonymous_array_int32_t_6_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_int32_t_6 = EK_COMPLETE;
                if (TK_NONE == type_ids_value.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_int32_t_6 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_int32_t_6 = 0;
                PlainCollectionHeader header_anonymous_array_int32_t_6 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_6, element_flags_anonymous_array_int32_t_6);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(6));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_6, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_6));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_6", type_ids_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_6 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_value = 0x00000001;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_IntData.reset();
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_IntData);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_IntData, member_value);
        }
        CompleteStructType struct_type_IntData = TypeObjectUtils::build_complete_struct_type(struct_flags_IntData, header_IntData, member_seq_IntData);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_IntData, type_name_IntData.to_string(), type_ids_IntData))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "IntData already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_DblData_type_identifier(
        TypeIdentifierPair& type_ids_DblData)
{

    ReturnCode_t return_code_DblData {eprosima::fastdds::dds::RETCODE_OK};
    return_code_DblData =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "DblData", type_ids_DblData);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_DblData)
    {
        StructTypeFlag struct_flags_DblData = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_DblData = "DblData";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_DblData;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_DblData;
        CompleteTypeDetail detail_DblData = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_DblData, ann_custom_DblData, type_name_DblData.to_string());
        CompleteStructHeader header_DblData;
        header_DblData = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_DblData);
        CompleteStructMemberSeq member_seq_DblData;
        {
            TypeIdentifierPair type_ids_index;
            ReturnCode_t return_code_index {eprosima::fastdds::dds::RETCODE_OK};
            return_code_index =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_uint16_t_18", type_ids_index);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_index)
            {
                return_code_index =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_index);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_index)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_uint16_t_18_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_uint16_t_18 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_index, element_identifier_anonymous_array_uint16_t_18_ec))};
                if (!element_identifier_anonymous_array_uint16_t_18_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_uint16_t_18 = EK_COMPLETE;
                if (TK_NONE == type_ids_index.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_uint16_t_18 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_uint16_t_18 = 0;
                PlainCollectionHeader header_anonymous_array_uint16_t_18 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_uint16_t_18, element_flags_anonymous_array_uint16_t_18);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(18));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_uint16_t_18, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_uint16_t_18));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint16_t_18", type_ids_index))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint16_t_18 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_index = 0x00000000;
            bool common_index_ec {false};
            CommonStructMember common_index {TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_index, common_index_ec))};
            if (!common_index_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_index = "index";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
            ann_custom_DblData.reset();
            CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index, member_ann_builtin_index, ann_custom_DblData);
            CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index, detail_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_DblData, member_index);
        }
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_double_18", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                return_code_value =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_double", type_ids_value);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_double_18_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_double_18 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, element_identifier_anonymous_array_double_18_ec))};
                if (!element_identifier_anonymous_array_double_18_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_double_18 = EK_COMPLETE;
                if (TK_NONE == type_ids_value.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_double_18 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_double_18 = 0;
                PlainCollectionHeader header_anonymous_array_double_18 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_double_18, element_flags_anonymous_array_double_18);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(18));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_double_18, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_double_18));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_double_18", type_ids_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_double_18 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_value = 0x00000001;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_DblData.reset();
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_DblData);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_DblData, member_value);
        }
        CompleteStructType struct_type_DblData = TypeObjectUtils::build_complete_struct_type(struct_flags_DblData, header_DblData, member_seq_DblData);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_DblData, type_name_DblData.to_string(), type_ids_DblData))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "DblData already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_StampData_type_identifier(
        TypeIdentifierPair& type_ids_StampData)
{

    ReturnCode_t return_code_StampData {eprosima::fastdds::dds::RETCODE_OK};
    return_code_StampData =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "StampData", type_ids_StampData);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_StampData)
    {
        StructTypeFlag struct_flags_StampData = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_StampData = "StampData";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StampData;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StampData;
        CompleteTypeDetail detail_StampData = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StampData, ann_custom_StampData, type_name_StampData.to_string());
        CompleteStructHeader header_StampData;
        header_StampData = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StampData);
        CompleteStructMemberSeq member_seq_StampData;
        {
            TypeIdentifierPair type_ids_index;
            ReturnCode_t return_code_index {eprosima::fastdds::dds::RETCODE_OK};
            return_code_index =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_uint16_t_2", type_ids_index);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_index)
            {
                return_code_index =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint16_t", type_ids_index);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_index)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_uint16_t_2_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_uint16_t_2 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_index, element_identifier_anonymous_array_uint16_t_2_ec))};
                if (!element_identifier_anonymous_array_uint16_t_2_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_uint16_t_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_index.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_uint16_t_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_uint16_t_2 = 0;
                PlainCollectionHeader header_anonymous_array_uint16_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_uint16_t_2, element_flags_anonymous_array_uint16_t_2);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_uint16_t_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_uint16_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint16_t_2", type_ids_index))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint16_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_index = 0x00000000;
            bool common_index_ec {false};
            CommonStructMember common_index {TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_index, common_index_ec))};
            if (!common_index_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_index = "index";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
            ann_custom_StampData.reset();
            CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index, member_ann_builtin_index, ann_custom_StampData);
            CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index, detail_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_StampData, member_index);
        }
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_uint64_t_2", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                return_code_value =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_uint64_t", type_ids_value);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_uint64_t_2_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_uint64_t_2 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, element_identifier_anonymous_array_uint64_t_2_ec))};
                if (!element_identifier_anonymous_array_uint64_t_2_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_uint64_t_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_value.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_uint64_t_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_uint64_t_2 = 0;
                PlainCollectionHeader header_anonymous_array_uint64_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_uint64_t_2, element_flags_anonymous_array_uint64_t_2);
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_uint64_t_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_uint64_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint64_t_2", type_ids_value))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint64_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_value = 0x00000001;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_StampData.reset();
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_StampData);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_StampData, member_value);
        }
        CompleteStructType struct_type_StampData = TypeObjectUtils::build_complete_struct_type(struct_flags_StampData, header_StampData, member_seq_StampData);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StampData, type_name_StampData.to_string(), type_ids_StampData))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StampData already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MdDelta_type_identifier(
        TypeIdentifierPair& type_ids_MdDelta)
{

    ReturnCode_t return_code_MdDelta {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MdDelta =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "MdDelta", type_ids_MdDelta);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MdDelta)
    {
        StructTypeFlag struct_flags_MdDelta = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MdDelta = "MdDelta";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MdDelta;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MdDelta;
        CompleteTypeDetail detail_MdDelta = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MdDelta, ann_custom_MdDelta, type_name_MdDelta.to_string());
        CompleteStructHeader header_MdDelta;
        header_MdDelta = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MdDelta);
        CompleteStructMemberSeq member_seq_MdDelta;
        {
            TypeIdentifierPair type_ids_session_idx;
            ReturnCode_t return_code_session_idx {eprosima::fastdds::dds::RETCODE_OK};
            return_code_session_idx =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_session_idx);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_session_idx)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "session_idx Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_session_idx = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_session_idx = 0x00000000;
            bool common_session_idx_ec {false};
            CommonStructMember common_session_idx {TypeObjectUtils::build_common_struct_member(member_id_session_idx, member_flags_session_idx, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_session_idx, common_session_idx_ec))};
            if (!common_session_idx_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure session_idx member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_session_idx = "session_idx";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_session_idx;
            ann_custom_MdDelta.reset();
            CompleteMemberDetail detail_session_idx = TypeObjectUtils::build_complete_member_detail(name_session_idx, member_ann_builtin_session_idx, ann_custom_MdDelta);
            CompleteStructMember member_session_idx = TypeObjectUtils::build_complete_struct_member(common_session_idx, detail_session_idx);
            TypeObjectUtils::add_complete_struct_member(member_seq_MdDelta, member_session_idx);
        }
        {
            TypeIdentifierPair type_ids_wire_tstamp;
            ReturnCode_t return_code_wire_tstamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_wire_tstamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_wire_tstamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_wire_tstamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "wire_tstamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_wire_tstamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_wire_tstamp = 0x00000001;
            bool common_wire_tstamp_ec {false};
            CommonStructMember common_wire_tstamp {TypeObjectUtils::build_common_struct_member(member_id_wire_tstamp, member_flags_wire_tstamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_wire_tstamp, common_wire_tstamp_ec))};
            if (!common_wire_tstamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure wire_tstamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_wire_tstamp = "wire_tstamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_wire_tstamp;
            ann_custom_MdDelta.reset();
            CompleteMemberDetail detail_wire_tstamp = TypeObjectUtils::build_complete_member_detail(name_wire_tstamp, member_ann_builtin_wire_tstamp, ann_custom_MdDelta);
            CompleteStructMember member_wire_tstamp = TypeObjectUtils::build_complete_struct_member(common_wire_tstamp, detail_wire_tstamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_MdDelta, member_wire_tstamp);
        }
        {
            TypeIdentifierPair type_ids_symbol;
            ReturnCode_t return_code_symbol {eprosima::fastdds::dds::RETCODE_OK};
            return_code_symbol =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_symbol);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_symbol)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_symbol))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_symbol = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_symbol = 0x00000002;
            bool common_symbol_ec {false};
            CommonStructMember common_symbol {TypeObjectUtils::build_common_struct_member(member_id_symbol, member_flags_symbol, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_symbol, common_symbol_ec))};
            if (!common_symbol_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure symbol member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_symbol = "symbol";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_symbol;
            ann_custom_MdDelta.reset();
            CompleteMemberDetail detail_symbol = TypeObjectUtils::build_complete_member_detail(name_symbol, member_ann_builtin_symbol, ann_custom_MdDelta);
            CompleteStructMember member_symbol = TypeObjectUtils::build_complete_struct_member(common_symbol, detail_symbol);
            TypeObjectUtils::add_complete_struct_member(member_seq_MdDelta, member_symbol);
        }
        {
            TypeIdentifierPair type_ids_int_data;
            ReturnCode_t return_code_int_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_int_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "IntData", type_ids_int_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_int_data)
            {
            ::register_IntData_type_identifier(type_ids_int_data);
            }
            StructMemberFlag member_flags_int_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_int_data = 0x00000003;
            bool common_int_data_ec {false};
            CommonStructMember common_int_data {TypeObjectUtils::build_common_struct_member(member_id_int_data, member_flags_int_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_int_data, common_int_data_ec))};
            if (!common_int_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure int_data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_int_data = "int_data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_int_data;
            ann_custom_MdDelta.reset();
            CompleteMemberDetail detail_int_data = TypeObjectUtils::build_complete_member_detail(name_int_data, member_ann_builtin_int_data, ann_custom_MdDelta);
            CompleteStructMember member_int_data = TypeObjectUtils::build_complete_struct_member(common_int_data, detail_int_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_MdDelta, member_int_data);
        }
        {
            TypeIdentifierPair type_ids_dbl_data;
            ReturnCode_t return_code_dbl_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_dbl_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "DblData", type_ids_dbl_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_dbl_data)
            {
            ::register_DblData_type_identifier(type_ids_dbl_data);
            }
            StructMemberFlag member_flags_dbl_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_dbl_data = 0x00000004;
            bool common_dbl_data_ec {false};
            CommonStructMember common_dbl_data {TypeObjectUtils::build_common_struct_member(member_id_dbl_data, member_flags_dbl_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_dbl_data, common_dbl_data_ec))};
            if (!common_dbl_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure dbl_data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_dbl_data = "dbl_data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_dbl_data;
            ann_custom_MdDelta.reset();
            CompleteMemberDetail detail_dbl_data = TypeObjectUtils::build_complete_member_detail(name_dbl_data, member_ann_builtin_dbl_data, ann_custom_MdDelta);
            CompleteStructMember member_dbl_data = TypeObjectUtils::build_complete_struct_member(common_dbl_data, detail_dbl_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_MdDelta, member_dbl_data);
        }
        {
            TypeIdentifierPair type_ids_stamps;
            ReturnCode_t return_code_stamps {eprosima::fastdds::dds::RETCODE_OK};
            return_code_stamps =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StampData", type_ids_stamps);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_stamps)
            {
            ::register_StampData_type_identifier(type_ids_stamps);
            }
            StructMemberFlag member_flags_stamps = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_stamps = 0x00000005;
            bool common_stamps_ec {false};
            CommonStructMember common_stamps {TypeObjectUtils::build_common_struct_member(member_id_stamps, member_flags_stamps, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_stamps, common_stamps_ec))};
            if (!common_stamps_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure stamps member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_stamps = "stamps";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_stamps;
            ann_custom_MdDelta.reset();
            CompleteMemberDetail detail_stamps = TypeObjectUtils::build_complete_member_detail(name_stamps, member_ann_builtin_stamps, ann_custom_MdDelta);
            CompleteStructMember member_stamps = TypeObjectUtils::build_complete_struct_member(common_stamps, detail_stamps);
            TypeObjectUtils::add_complete_struct_member(member_seq_MdDelta, member_stamps);
        }
        CompleteStructType struct_type_MdDelta = TypeObjectUtils::build_complete_struct_type(struct_flags_MdDelta, header_MdDelta, member_seq_MdDelta);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MdDelta, type_name_MdDelta.to_string(), type_ids_MdDelta))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MdDelta already registered in TypeObjectRegistry for a different type.");
        }
    }
}

